apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: vaultwardens.apps.homystack.com
  labels:
    apps.homystack.com/composition: vaultwarden
spec:
  compositeTypeRef:
    apiVersion: apps.homystack.com/v1alpha1
    kind: VaultWarden

  mode: Pipeline
  pipeline:
    - step: render-resources
      functionRef:
        name: crossplane-contrib-function-go-templating 
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
            template: |
              {{- $name := .observed.composite.resource.metadata.name -}}
              {{- $namespace := .observed.composite.resource.metadata.namespace -}}
              {{- $spec := .observed.composite.resource.spec -}}

              # === HelmRelease ===
              ---
              apiVersion: helm.toolkit.fluxcd.io/v2
              kind: HelmRelease
              metadata:
                name: helmrelease-{{ $name }}
                namespace: {{ $namespace }}
                labels:
                  crossplane.io/composite: {{ $name }}
                annotations:
                  gotemplating.fn.crossplane.io/composition-resource-name: helmrelease-{{$name}}
              spec:
                interval: 10m
                chart:
                  spec:
                    chart: vaultwarden
                    version: "*"
                    sourceRef:
                      kind: HelmRepository
                      name: glissil-labs
                      namespace: flux-system
                values:
                  persistence:
                    enabled: {{ $spec.persistence.enabled }}
                    {{- if $spec.persistence.size }}
                    size: {{ quote $spec.persistence.size }}
                    {{- end }}
                    {{- if $spec.persistence.storageClass }}
                    storageClass: {{ quote $spec.persistence.storageClass }}
                    {{- end }}
                  database:
                    type: {{ quote $spec.database.type }}
                    {{- if $spec.database.url }}
                    url: {{ quote $spec.database.url }}
                    {{- end }}
                    {{- if $spec.database.existingSecret }}
                    existingSecret: {{ quote $spec.database.existingSecret }}
                    {{- end }}
                  ingress:
                    enabled: {{ $spec.ingress.enabled }}
                    {{- if $spec.ingress.enabled }}
                    host: {{ quote $spec.ingress.host }}
                    hosts:
                      - host: {{ quote $spec.ingress.host }}
                        paths:
                          - path: /
                            pathType: Prefix
                    className: {{ quote $spec.ingress.className }}
                    {{- if $spec.ingress.annotations }}
                    annotations: {{ toYaml $spec.ingress.annotations | nindent 10 }}
                    {{- end }}
                    {{- if $spec.ingress.tlsSecretName }}
                    tls:
                      - secretName: {{ quote $spec.ingress.tlsSecretName }}
                        hosts:
                          - {{ quote $spec.ingress.host }}
                    {{- end }}
                    {{- end }}
                  config:
                    {{- if $spec.config.domain }}
                    domain: {{ quote $spec.config.domain }}
                    {{- end }}
                    allowSignups: {{ $spec.config.allowSignups }}
                    verifySignup: {{ $spec.config.verifySignup }}
                    enableWebVault: {{ $spec.config.enableWebVault }}
                    {{- if $spec.config.adminTokenSecret }}
                    adminTokenSecret: {{ quote $spec.config.adminTokenSecret }}
                    {{- end }}
                    smtp:
                      enabled: {{ $spec.config.smtp.enabled }}
                      {{- if $spec.config.smtp.enabled }}
                      host: {{ quote $spec.config.smtp.host }}
                      {{- if $spec.config.smtp.port }}
                      port: {{ $spec.config.smtp.port }}
                      {{- end }}
                      {{- if $spec.config.smtp.from }}
                      from: {{ quote $spec.config.smtp.from }}
                      {{- end }}
                      {{- if $spec.config.smtp.user }}
                      user: {{ quote $spec.config.smtp.user }}
                      {{- end }}
                      {{- if $spec.config.smtp.passwordSecret }}
                      passwordSecret: {{ quote $spec.config.smtp.passwordSecret }}
                      {{- end }}
                      security: {{ quote $spec.config.smtp.security }}
                      {{- end }}

              {{- if and $spec.ingress.enabled $spec.ingress.host $spec.tls }}
              # === Certificate (cert-manager) ===
              ---
              apiVersion: cert-manager.io/v1
              kind: Certificate
              metadata:
                name: certificate-{{ $name }}
                namespace: {{ $namespace }}
                labels:
                  crossplane.io/composite: {{ $name }}
                annotations:
                  gotemplating.fn.crossplane.io/composition-resource-name: certificate-{{$name}}

              spec:
                secretName: {{ default (printf "%s-tls" $name) $spec.ingress.tlsSecretName }}
                issuerRef:
                  name: {{ $spec.tls.issuerRef.name }}
                  kind: {{ $spec.tls.issuerRef.kind }}
                  {{- if $spec.tls.issuerRef.group }}
                  group: {{ $spec.tls.issuerRef.group }}
                  {{- end }}
                dnsNames:
                  - {{ $spec.ingress.host }}
              {{- end }}

              {{- if $spec.backup }}
              # === K8up Backup Schedule ===
              ---
              apiVersion: k8up.io/v1
              kind: Schedule
              metadata:
                name: backup-{{ $name }}
                namespace: {{ $namespace }}
                labels:
                  crossplane.io/composite: {{ $name }}
                annotations:
                  gotemplating.fn.crossplane.io/composition-resource-name: backup-{{$name}}

              spec:
                schedule: {{ quote $spec.backup.schedule }}
                backup:
                  retention:
                    keepJobs: 7
                    keepDaily: 7
                  {{- if eq $spec.backup.backend "s3" }}
                  backend:
                    s3:
                      endpoint: {{ quote $spec.backup.s3.endpoint }}
                      bucket: {{ quote $spec.backup.s3.bucket }}
                      region: {{ quote $spec.backup.s3.region }}
                      accessKeySecret:
                        name: {{ quote $spec.backup.s3.accessKeySecret }}
                        key: accesskey
                      secretKeySecret:
                        name: {{ quote $spec.backup.s3.secretKeySecret }}
                        key: secretkey
                  {{- else if eq $spec.backup.backend "volume" }}
                  backend:
                    volume:
                      volumeName: backup-volume
                  {{- /* другие бэкенды можно добавить по аналогии */ -}}
                  {{- end }}
                # Бэкапим поды с нужным label (обычно Helm release ставит app.kubernetes.io/instance)
                pod:
                  namespace: {{ $namespace }}
                  labels:
                    app.kubernetes.io/instance: {{ $name }}
              {{- end }}
    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready 