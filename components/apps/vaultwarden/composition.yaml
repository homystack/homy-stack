apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: vaultwardens.apps.homystack.com
  labels:
    apps.homystack.com/composition: vaultwarden
spec:
  compositeTypeRef:
    apiVersion: apps.homystack.com/v1alpha1
    kind: VaultWarden

  mode: Pipeline
  pipeline:
    - step: render-resources
      functionRef:
        name: crossplane-contrib-function-go-templating 
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
            template: |
              {{- $name := .observed.composite.resource.metadata.name -}}
              {{- $namespace := .observed.composite.resource.metadata.namespace -}}
              {{- $spec := .observed.composite.resource.spec -}}
              # === HelmRelease ===
              ---
              apiVersion: helm.toolkit.fluxcd.io/v2
              kind: HelmRelease
              metadata:
                name: {{ $name }}-vaultwarden
                namespace: {{ $namespace }}
                labels:
                  crossplane.io/composite: {{ $name }}
                annotations:
                  gotemplating.fn.crossplane.io/composition-resource-name: {{$name}}-vaultwarden-helmrelease
              spec:
                interval: 10m
                chart:
                  spec:
                    chart: vaultwarden
                    version: "*"
                    sourceRef:
                      kind: HelmRepository
                      name: glissil-labs
                      namespace: flux-system
                values:
                  persistence:
                    enabled: {{ $spec.persistence.enabled }}
                    {{- if $spec.persistence.size }}
                    size: {{ quote $spec.persistence.size }}
                    {{- end }}
                    {{- if $spec.persistence.storageClass }}
                    storageClass: {{ quote $spec.persistence.storageClass }}
                    {{- end }}
                  database:
                    type: {{ quote $spec.database.type }}
                    {{- if $spec.database.url }}
                    url: {{ quote $spec.database.url }}
                    {{- end }}
                    {{- if $spec.database.existingSecret }}
                    existingSecret: {{ quote $spec.database.existingSecret }}
                    {{- end }}
                  ingress:
                    enabled: {{ $spec.ingress.enabled }}
                    {{- if $spec.ingress.enabled }}
                    host: {{ quote $spec.ingress.host }}
                    hosts:
                      - host: {{ quote $spec.ingress.host }}
                        paths:
                          - path: /
                            pathType: Prefix
                    className: {{ quote $spec.ingress.className }}
                    {{- if $spec.ingress.annotations }}
                    annotations: {{ toYaml $spec.ingress.annotations | nindent 10 }}
                    {{- end }}
                    {{- if $spec.ingress.tlsSecretName }}
                    tls:
                      - secretName: {{ quote $spec.ingress.tlsSecretName }}
                        hosts:
                          - {{ quote $spec.ingress.host }}
                    {{- end }}
                    {{- end }}
                  config:
                    {{- if $spec.config.domain }}
                    domain: {{ quote $spec.config.domain }}
                    {{- end }}
                    allowSignups: {{ $spec.config.allowSignups }}
                    verifySignup: {{ $spec.config.verifySignup }}
                    enableWebVault: {{ $spec.config.enableWebVault }}
                    {{- if $spec.config.adminTokenSecret }}
                    adminTokenSecret: {{ quote $spec.config.adminTokenSecret }}
                    {{- end }}
                    smtp:
                      enabled: {{ $spec.config.smtp.enabled }}
                      {{- if $spec.config.smtp.enabled }}
                      host: {{ quote $spec.config.smtp.host }}
                      {{- if $spec.config.smtp.port }}
                      port: {{ $spec.config.smtp.port }}
                      {{- end }}
                      {{- if $spec.config.smtp.from }}
                      from: {{ quote $spec.config.smtp.from }}
                      {{- end }}
                      {{- if $spec.config.smtp.user }}
                      user: {{ quote $spec.config.smtp.user }}
                      {{- end }}
                      {{- if $spec.config.smtp.passwordSecret }}
                      passwordSecret: {{ quote $spec.config.smtp.passwordSecret }}
                      {{- end }}
                      security: {{ quote $spec.config.smtp.security }}
                      {{- end }}

              {{- if and $spec.ingress.enabled $spec.ingress.host $spec.tls }}
              # === Certificate (cert-manager) ===
              ---
              apiVersion: cert-manager.io/v1
              kind: Certificate
              metadata:
                name: {{ $name }}-vaultwarden
                namespace: {{ $namespace }}
                labels:
                  crossplane.io/composite: {{ $name }}
                annotations:
                  gotemplating.fn.crossplane.io/composition-resource-name: {{$name}}-vaultwarden-certificate s
              spec:
                secretName: {{ default (printf "%s-tls" $name) $spec.ingress.tlsSecretName }}
                issuerRef:
                  name: {{ $spec.tls.issuerRef.name }}
                  kind: {{ $spec.tls.issuerRef.kind }}
                  {{- if $spec.tls.issuerRef.group }}
                  group: {{ $spec.tls.issuerRef.group }}
                  {{- end }}
                dnsNames:
                  - {{ $spec.ingress.host }}
              {{- end }}
              

    - step: configure-backup-for-s3
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline: 
          template: |
            {{- $name := .observed.composite.resource.metadata.name -}}
            {{- $namespace := .observed.composite.resource.metadata.namespace -}}
            {{- $spec := .observed.composite.resource.spec -}}
            {{- if and $spec.backup (eq $spec.backup.backend "s3") }}              
            # === K8up Backup Schedule ===
            ---
            apiVersion: k8up.io/v1
            kind: Schedule
            metadata:
              name: {{ $name }}-vaultwarden
              namespace: {{ $namespace }}
              labels:
                crossplane.io/composite: {{ $name }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{$name}}-vaultwarden-schedule
            spec:
              schedule: {{ quote $spec.backup.schedule }}
              backup:
                retention:
                  keepJobs: 7
                  keepDaily: 7
                backend:
                  s3:
                    endpoint: {{ quote $spec.backup.s3.endpoint }}
                    bucket: {{ quote $spec.backup.s3.bucket }}
                    region: {{ quote $spec.backup.s3.region }}
                    accessKeySecret:
                      name: {{ quote $spec.backup.s3.accessKeySecret }}
                      key: accesskey
                    secretKeySecret:
                      name: {{ quote $spec.backup.s3.secretKeySecret }}
                      key: secretkey
              # Бэкапим поды с нужным label (обычно Helm release ставит app.kubernetes.io/instance)
              pod:
                namespace: {{ $namespace }}
                labels:
                  app.kubernetes.io/instance: {{ $name }}
            {{- end }}

    - step: configure-backup-for-backup-server
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline: 
          template: |
            {{- $name := .observed.composite.resource.metadata.name -}}
            {{- $namespace := .observed.composite.resource.metadata.namespace -}}
            {{- $spec := .observed.composite.resource.spec -}}
            
            {{- if and $spec.backup (eq $spec.backup.backend "backupServer") }}
            ---
            apiVersion: meta.gotemplating.fn.crossplane.io/v1alpha1
            kind: ExtraResources
            requirements:
              backupServer:
                apiVersion: {{ default "apps.homystack.com/v1alpha1" $spec.backup.backupServer.ref.apiVersion }}
                kind: {{ default "BackupServer" $spec.backup.backupServer.ref.kind }}
                matchName: {{ $spec.backup.backupServer.ref.name }}
                {{- if $spec.backup.backupServer.ref.namespace }}
                namespace: {{ $spec.backup.backupServer.ref.namespace }}
                {{- end }}
            
            {{- $backupServer := getExtraResources . "backupServer" | first | default nil }}
            {{- if $backupServer }}
            {{- $backupServerName := $spec.backup.backupServer.ref.name }}
            {{- $backupServerNamespace := default $namespace $spec.backup.backupServer.ref.namespace }}
            
            # === K8up Backup Schedule ===
            ---
            apiVersion: k8up.io/v1
            kind: Schedule
            metadata:
              name: {{ $name }}-vaultwarden
              namespace: {{ $namespace }}
              labels:
                crossplane.io/composite: {{ $name }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{$name}}-vaultwarden-schedule
            spec:
              schedule: {{ quote $spec.backup.schedule }}
              backup:
                retention:
                  keepJobs: 7
                  keepDaily: 7
                backend:
                  rest:
                    url: {{ printf "http://%s-backup-server.%s.svc.cluster.local:8080" $backupServerName $backupServerNamespace }}
                    userSecretRef:
                      name: {{ printf "%s-backupserver-creds" $backupServerName }}
                      key: username
                    passwordSecretRef:
                      name: {{ printf "%s-backupserver-creds" $backupServerName }}
                      key: password
              # Бэкапим поды с нужным label (обычно Helm release ставит app.kubernetes.io/instance)
              pod:
                namespace: {{ $namespace }}
                labels:
                  app.kubernetes.io/instance: {{ $name }}
            {{- end }}
            {{- end }}


    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready 



    - step: set-status-url
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline: 
          template: |
              {{- if .observed.composite.resource.spec.ingress }}
                {{- if .observed.resources }}
                  {{- $key := printf "helmrelease-%s" .observed.composite.resource.metadata.name -}}
                  {{- $hr := index .observed.resources $key | default nil -}}
                  {{- if $hr }}
                    {{- $ready := ($hr | getResourceCondition "Ready").Status | default "False" -}}
                    {{- if eq $ready "True" }}
                      {{- $protocol := "http" -}}
                      {{- if and (.observed.composite.resource.spec.tls) (ne (len .observed.composite.resource.spec.tls) 0) -}}
                        {{- $protocol = "https" -}}
                      {{- end -}}
              ---
              apiVersion: apps.homystack.com/v1alpha1
              kind: VaultWarden
              status:
                url: {{ quote (printf "%s://%s" $protocol .observed.composite.resource.spec.ingress.host) }}
                    {{- end }}
                  {{- end }}
                {{- end }}
              {{- end }}
