apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: vaultwardens.apps.homystack.com
  labels:
    apps.homystack.com/composition: vaultwarden
spec:
  compositeTypeRef:
    apiVersion: apps.homystack.com/v1alpha1
    kind: VaultWarden

  mode: Pipeline
  pipeline:
    - step: render-resources
      functionRef:
        name: crossplane-contrib-function-go-templating 
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
            template: |
              {{- $name := .observed.composite.resource.metadata.name -}}
              {{- $namespace := .observed.composite.resource.metadata.namespace -}}
              {{- $spec := .observed.composite.resource.spec -}}
              # === HelmRelease ===
              ---
              apiVersion: helm.toolkit.fluxcd.io/v2
              kind: HelmRelease
              metadata:
                name: {{ $name }}-vaultwarden
                namespace: {{ $namespace }}
                labels:
                  crossplane.io/composite: {{ $name }}
                annotations:
                  gotemplating.fn.crossplane.io/composition-resource-name: {{$name}}-vaultwarden-helmrelease
              spec:
                interval: 10m
                chart:
                  spec:
                    chart: vaultwarden
                    version: "*"
                    sourceRef:
                      kind: HelmRepository
                      name: glissil-labs
                      namespace: flux-system
                values:
                  persistence:
                    enabled: {{ $spec.persistence.enabled }}
                    {{- if $spec.persistence.size }}
                    size: {{ quote $spec.persistence.size }}
                    {{- end }}
                    {{- if $spec.persistence.storageClass }}
                    storageClass: {{ quote $spec.persistence.storageClass }}
                    {{- end }}
                  database:
                    type: {{ quote $spec.database.type }}
                    {{- if $spec.database.url }}
                    url: {{ quote $spec.database.url }}
                    {{- end }}
                    {{- if $spec.database.existingSecret }}
                    existingSecret: {{ quote $spec.database.existingSecret }}
                    {{- end }}
                  ingress:
                    enabled: {{ $spec.ingress.enabled }}
                    {{- if $spec.ingress.enabled }}
                    host: {{ quote $spec.ingress.host }}
                    hosts:
                      - host: {{ quote $spec.ingress.host }}
                        paths:
                          - path: /
                            pathType: Prefix
                    className: {{ quote $spec.ingress.className }}
                    {{- if $spec.ingress.annotations }}
                    annotations: {{ toYaml $spec.ingress.annotations | nindent 10 }}
                    {{- end }}
                    {{- if $spec.ingress.tlsSecretName }}
                    tls:
                      - secretName: {{ quote $spec.ingress.tlsSecretName }}
                        hosts:
                          - {{ quote $spec.ingress.host }}
                    {{- end }}
                    {{- end }}
                  config:
                    {{- if $spec.config.domain }}
                    domain: {{ quote $spec.config.domain }}
                    {{- end }}
                    allowSignups: {{ $spec.config.allowSignups }}
                    verifySignup: {{ $spec.config.verifySignup }}
                    enableWebVault: {{ $spec.config.enableWebVault }}
                    {{- if $spec.config.adminTokenSecret }}
                    adminTokenSecret: {{ quote $spec.config.adminTokenSecret }}
                    {{- end }}
                    smtp:
                      enabled: {{ $spec.config.smtp.enabled }}
                      {{- if $spec.config.smtp.enabled }}
                      host: {{ quote $spec.config.smtp.host }}
                      {{- if $spec.config.smtp.port }}
                      port: {{ $spec.config.smtp.port }}
                      {{- end }}
                      {{- if $spec.config.smtp.from }}
                      from: {{ quote $spec.config.smtp.from }}
                      {{- end }}
                      {{- if $spec.config.smtp.user }}
                      user: {{ quote $spec.config.smtp.user }}
                      {{- end }}
                      {{- if $spec.config.smtp.passwordSecret }}
                      passwordSecret: {{ quote $spec.config.smtp.passwordSecret }}
                      {{- end }}
                      security: {{ quote $spec.config.smtp.security }}
                      {{- end }}

              {{- if and $spec.ingress.enabled $spec.ingress.host $spec.tls }}
              # === Certificate (cert-manager) ===
              ---
              apiVersion: cert-manager.io/v1
              kind: Certificate
              metadata:
                name: {{ $name }}-vaultwarden
                namespace: {{ $namespace }}
                labels:
                  crossplane.io/composite: {{ $name }}
                annotations:
                  gotemplating.fn.crossplane.io/composition-resource-name: {{$name}}-vaultwarden-certificate s
              spec:
                secretName: {{ default (printf "%s-tls" $name) $spec.ingress.tlsSecretName }}
                issuerRef:
                  name: {{ $spec.tls.issuerRef.name }}
                  kind: {{ $spec.tls.issuerRef.kind }}
                  {{- if $spec.tls.issuerRef.group }}
                  group: {{ $spec.tls.issuerRef.group }}
                  {{- end }}
                dnsNames:
                  - {{ $spec.ingress.host }}
              {{- end }}
              

    - step: configure-backup-for-s3
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline: 
          template: |
            {{- $name := .observed.composite.resource.metadata.name -}}
            {{- $namespace := .observed.composite.resource.metadata.namespace -}}
            {{- $spec := .observed.composite.resource.spec -}}
            {{- if and $spec.backup (eq $spec.backup.backend "s3") }}              
            # === K8up Backup Schedule ===
            ---
            apiVersion: k8up.io/v1
            kind: Schedule
            metadata:
              name: {{ $name }}-vaultwarden
              namespace: {{ $namespace }}
              labels:
                crossplane.io/composite: {{ $name }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{$name}}-vaultwarden-schedule
            spec:
              schedule: {{ quote $spec.backup.schedule }}
              backup:
                retention:
                  keepJobs: 7
                  keepDaily: 7
                backend:
                  s3:
                    endpoint: {{ quote $spec.backup.s3.endpoint }}
                    bucket: {{ quote $spec.backup.s3.bucket }}
                    region: {{ quote $spec.backup.s3.region }}
                    accessKeySecret:
                      name: {{ quote $spec.backup.s3.accessKeySecret }}
                      key: accesskey
                    secretKeySecret:
                      name: {{ quote $spec.backup.s3.secretKeySecret }}
                      key: secretkey
              # Бэкапим поды с нужным label (обычно Helm release ставит app.kubernetes.io/instance)
                labelSelectors:
                  - matchExpressions:
                    - key: helm.toolkit.fluxcd.io/name
                      operator: In
                      values:
                        - {{$name}}-vaultwarden
            {{- end }}

    - step: configure-backup-for-backup-server
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline: 
          template: |
            {{- $name := .observed.composite.resource.metadata.name -}}
            {{- $namespace := .observed.composite.resource.metadata.namespace -}}
            {{- $spec := .observed.composite.resource.spec -}}
            
            {{- if and $spec.backup (eq $spec.backup.backend "backupServer") }}
            {{- $backupServerName := $spec.backup.backupServer.ref.name }}
            {{- $backupServerNamespace := default $namespace $spec.backup.backupServer.ref.namespace }}
            {{- $repoName := $spec.backup.backupServer.repositoryName | default (printf "%s-vaultwarden" $name) }}
            {{- $repoPassword := $spec.backup.repoPassword | default dict }}
            {{- $strategy := $repoPassword.strategy | default "generate" }}
            {{- $secretName := printf "%s-backup-password" $name }}
            {{- $secretKey := "password" }}
            {{- /* Case 1: Generate password automatically (with dig!) */}}
            {{- if eq $strategy "generate" }}
            # === Backup Password Secret (Auto-generated, stable) ===
            ---
            apiVersion: v1
            kind: Secret
            metadata:
              name: {{ $secretName }}
              namespace: {{ $namespace }}
              labels:
                crossplane.io/composite: {{ $name }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{ $name }}-backup-password
            type: Opaque
            data:
              {{ $secretKey }}: {{ dig "resources" (printf "%s-backup-password" $name) "resource" "data" $secretKey (randAlphaNum 32 | b64enc) $.observed | quote }}
            {{- end }}
            
            {{- /* Case 2: Use direct password string */}}
            {{- if and (eq $strategy "direct") $repoPassword.password }}
            # === Backup Password Secret (Direct string) ===
            ---
            apiVersion: v1
            kind: Secret
            metadata:
              name: {{ $secretName }}
              namespace: {{ $namespace }}
              labels:
                crossplane.io/composite: {{ $name }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{$name}}-backup-password-secret
            type: Opaque
            data:
              {{ $secretKey }}: {{ $repoPassword.password | b64enc | quote }}
            {{- end }}
            
            {{- /* Case 3: Use existing secret reference */}}
            {{- if eq $strategy "existingSecret" }}
            {{- $secretName = $repoPassword.secretRef.name }}
            {{- $secretKey = $repoPassword.secretRef.key | default "password" }}
            {{- end }}
            
            # === K8up Backup Schedule ===
            ---
            apiVersion: k8up.io/v1
            kind: Schedule
            metadata:
              name: {{ $name }}-vaultwarden
              namespace: {{ $namespace }}
              labels:
                crossplane.io/composite: {{ $name }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{$name}}-vaultwarden-schedule
            spec:
              backend:
                repoPasswordSecretRef:
                  name: {{ $secretName }}
                  key: {{ $secretKey }}
                rest:
                  url: {{ printf "http://%s-backupserver.%s.svc.cluster.local:8000/%s" $backupServerName $backupServerNamespace $repoName }}
              prune:
                schedule: '0 1 * * 0'
                retention:
                  keepLast: 5
                  keepDaily: 14
              backup:
                schedule: {{ quote $spec.backup.schedule }}
              # Бэкапим поды с нужным label (обычно Helm release ставит app.kubernetes.io/instance)
                labelSelectors:
                  - matchExpressions:
                    - key: helm.toolkit.fluxcd.io/name
                      operator: In
                      values:
                        - {{$name}}-vaultwarden
            {{- end }}

    - step: configure-restore
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline: 
          template: |
            {{- $name := .observed.composite.resource.metadata.name -}}
            {{- $namespace := .observed.composite.resource.metadata.namespace -}}
            {{- $spec := .observed.composite.resource.spec -}}
            
            {{- if $spec.restore }}
            {{- $restoreSpec := $spec.restore }}
            
            {{- /* Determine restore backend configuration */}}
            {{- $backend := dict }}
            {{- $secretName := "" }}
            {{- $secretKey := "password" }}
            
            {{- /* Handle repoPassword for restore */}}
            {{- $repoPassword := $restoreSpec.repoPassword | default dict }}
            {{- $strategy := $repoPassword.strategy | default "existingSecret" }}
            
            {{- /* Case 1: Use direct password string */}}
            {{- if and (eq $strategy "direct") $repoPassword.password }}
            {{- $secretName = printf "%s-restore-password" $name }}
            # === Restore Password Secret (Direct string) ===
            ---
            apiVersion: v1
            kind: Secret
            metadata:
              name: {{ $secretName }}
              namespace: {{ $namespace }}
              labels:
                crossplane.io/composite: {{ $name }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{$name}}-restore-password-secret
            type: Opaque
            data:
              {{ $secretKey }}: {{ $repoPassword.password | b64enc | quote }}
            {{- end }}
            
            {{- /* Case 2: Use existing secret reference */}}
            {{- if eq $strategy "existingSecret" }}
            {{- $secretName = $repoPassword.secretRef.name }}
            {{- $secretKey = $repoPassword.secretRef.key | default "password" }}
            {{- end }}
            
            {{- /* Configure backend based on restore.backend */}}
            {{- if eq $restoreSpec.backend "s3" }}
            {{- $backend = dict "s3" (dict
              "endpoint" $restoreSpec.s3.endpoint
              "bucket" $restoreSpec.s3.bucket
              "accessKeyIDSecretRef" (dict "name" $restoreSpec.s3.accessKeySecret "key" "accesskey")
              "secretAccessKeySecretRef" (dict "name" $restoreSpec.s3.secretKeySecret "key" "secretkey")
            ) }}
            {{- else if eq $restoreSpec.backend "backupServer" }}
            {{- $backupServerName := $restoreSpec.backupServer.ref.name }}
            {{- $backupServerNamespace := default $namespace $restoreSpec.backupServer.ref.namespace }}
            {{- $repoName := $restoreSpec.backupServer.repositoryName }}
            {{- $backend = dict "rest" (dict
              "url" (printf "http://%s-backupserver.%s.svc.cluster.local:8000/%s" $backupServerName $backupServerNamespace $repoName)
            ) }}
            {{- end }}
            
            {{- /* Determine restore method */}}
            {{- $restoreMethod := dict }}
            {{- if eq $restoreSpec.method "folder" }}
            {{- $pvcName := $restoreSpec.pvcName | default (printf "%s-vaultwarden" $name) }}
            {{- $restoreMethod = dict "folder" (dict "claimName" $pvcName) }}
            {{- else if eq $restoreSpec.method "s3" }}
            {{- $restoreMethod = dict "s3" (dict
              "endpoint" $restoreSpec.restoreS3.endpoint
              "bucket" $restoreSpec.restoreS3.bucket
              "accessKeyIDSecretRef" (dict "name" $restoreSpec.restoreS3.accessKeySecret "key" "accesskey")
              "secretAccessKeySecretRef" (dict "name" $restoreSpec.restoreS3.secretKeySecret "key" "secretkey")
            ) }}
            {{- end }}
            
            # === K8up Restore Job ===
            ---
            apiVersion: k8up.io/v1
            kind: Restore
            metadata:
              name: {{ $name }}-vaultwarden-restore
              namespace: {{ $namespace }}
              labels:
                crossplane.io/composite: {{ $name }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{$name}}-vaultwarden-restore
            spec:
              {{- if $restoreSpec.snapshot }}
              snapshot: {{ quote $restoreSpec.snapshot }}
              {{- end }}
              {{- if $restoreMethod }}
              restoreMethod: {{ toYaml $restoreMethod | nindent 10 }}
              {{- end }}
              backend:
                repoPasswordSecretRef:
                  name: {{ $secretName }}
                  key: {{ $secretKey }}
                {{- if $backend.s3 }}
                s3: {{ toYaml $backend.s3 | nindent 10 }}
                {{- else if $backend.rest }}
                rest: {{ toYaml $backend.rest | nindent 10 }}
                {{- end }}
              {{- if $restoreSpec.podSecurityContext }}
              podSecurityContext: {{ toYaml $restoreSpec.podSecurityContext | nindent 10 }}
              {{- end }}
            {{- end }}

    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready 



    - step: set-status-url
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline: 
          template: |
              {{- if .observed.composite.resource.spec.ingress }}
                {{- if .observed.resources }}
                  {{- $key := printf "helmrelease-%s" .observed.composite.resource.metadata.name -}}
                  {{- $hr := index .observed.resources $key | default nil -}}
                  {{- if $hr }}
                    {{- $ready := ($hr | getResourceCondition "Ready").Status | default "False" -}}
                    {{- if eq $ready "True" }}
                      {{- $protocol := "http" -}}
                      {{- if and (.observed.composite.resource.spec.tls) (ne (len .observed.composite.resource.spec.tls) 0) -}}
                        {{- $protocol = "https" -}}
                      {{- end -}}
              ---
              apiVersion: apps.homystack.com/v1alpha1
              kind: VaultWarden
              status:
                url: {{ quote (printf "%s://%s" $protocol .observed.composite.resource.spec.ingress.host) }}
                    {{- end }}
                  {{- end }}
                {{- end }}
              {{- end }}
