apiVersion: apps.homystack.com/v1alpha1
kind: VaultWarden
metadata:
  name: my-vault-restored
  namespace: default
spec:
  # === Persistence (обязательно для SQLite!) ===
  persistence:
    enabled: true
    size: "5Gi"
    storageClass: "local-path"  # или "gp2", "ceph", и т.д.

  # === Database: SQLite (по умолчанию) ===
  database:
    type: "sqlite"
    # url и existingSecret не нужны — Vaultwarden использует /data/db.sqlite

  # === Ingress ===
  ingress:
    enabled: true
    host: "vaultwarden.example.com"
    className: "nginx"
    # annotations:
    #   nginx.ingress.kubernetes.io/ssl-redirect: "true"
    tlsSecretName: "vaultwarden-tls"

  # === TLS (cert-manager) ===
  # tls:
  #   issuerRef:
  #     name: "letsencrypt-prod"
  #     kind: "ClusterIssuer"

  # === Backup (K8up → Backup Server) ===
  backup:
    schedule: "* * * * *"  # каждый день в 2:00 UTC
    retention: "7d"
    backend: "backupServer"
    # === Примеры использования repoPassword ===
    # Вариант 1: Автоматическая генерация пароля (по умолчанию)
    repoPassword:
       strategy: "existingSecret"  # автоматически сгенерирует пароль
       secretRef:
        name: my-vault-backup-password
        key: password
    
    # Вариант 2: Прямая строка пароля
    # repoPassword:
    #   strategy: "direct"
    #   password: "my-secret-backup-password-123"
    
    # Вариант 3: Ссылка на существующий секрет
    # repoPassword:
    #   strategy: "existingSecret"
    #   secretRef:
    #     name: "existing-backup-password-secret"
    #     key: "password"  # опционально, по умолчанию "password"
    
    backupServer:
        ref:
          namespace: default
          name: my-backup
  #   s3:
  #     endpoint: "https://s3.eu-west-1.amazonaws.com"
  #     bucket: "my-backups-vaultwarden"
  #     region: "eu-west-1"
  #     accessKeySecret: "vaultwarden-s3-accesskey"
  #     secretKeySecret: "vaultwarden-s3-secretkey"

  # === App Config ===
  config:
    domain: "https://vaultwarden.example.com"
    allowSignups: true
    verifySignup: false
    enableWebVault: true
    adminTokenSecret: "vaultwarden-admin-token"
    smtp:
      enabled: true
      host: "smtp.gmail.com"
      port: 587
      from: "vaultwarden@example.com"
      user: "vaultwarden@example.com"
      passwordSecret: "vaultwarden-smtp-password"
      security: "starttls"

  # === Restore (опционально) ===
  restore:
    backend: "backupServer"  # или "s3"
    repoPassword:
      strategy: "existingSecret"
      secretRef:
        name: "my-vault-backup-password"  # должен совпадать с паролем бэкапа
        key: "password"
    backupServer:
      ref:
        namespace: default
        name: my-backup
      repositoryName: my-vault-vaultwarden
    # s3:
    #   endpoint: "https://s3.eu-west-1.amazonaws.com"
    #   bucket: "my-backups-vaultwarden"
    #   region: "eu-west-1"
    #   accessKeySecret: "vaultwarden-s3-accesskey"
    #   secretKeySecret: "vaultwarden-s3-secretkey"
    snapshot: "5c5e7f8b"  # ID конкретного снапшота
    method: "folder"  # или "s3" для восстановления в S3
    # pvcName: "my-vault-vaultwarden"  # опционально, по умолчанию генерируется как имяинстанса-vaultwarden
    # Для восстановления в S3:
    # restoreS3:
    #   endpoint: "https://s3.eu-west-1.amazonaws.com"
    #   bucket: "vaultwarden-restore-bucket"
    #   accessKeySecret: "vaultwarden-s3-accesskey"
    #   secretKeySecret: "vaultwarden-s3-secretkey"
    # Для не-root пользователей:
    # podSecurityContext:
    #   fsGroup: 65532
    #   fsGroupChangePolicy: "OnRootMismatch"
    #   runAsUser: 65532
    #   runAsGroup: 65532
    #   runAsNonRoot: true
