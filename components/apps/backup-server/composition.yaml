apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: backupservers.apps.homystack.com
  labels:
    feature: restserver
spec:
  compositeTypeRef:
    apiVersion: apps.homystack.com/v1alpha1
    kind: BackupServer

  mode: Pipeline
  pipeline:
    - step: render-kubernetes-resources
      functionRef:
        name: crossplane-contrib-function-go-templating 
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{- $spec := .observed.composite.resource.spec -}}
            {{- $name := .observed.composite.resource.metadata.name -}}
            {{- $namespace := .observed.composite.resource.metadata.namespace -}}
            ---
            apiVersion: apps/v1
            kind: StatefulSet
            metadata:
              name: {{ $name }}-backupserver
              namespace: {{ $namespace | quote }}
              annotations:
                gotemplating.fn.crossplane.io/ready: "True"
                gotemplating.fn.crossplane.io/composition-resource-name: {{ $name }}-backupserver-sts
              labels: 
                app: {{ $name }}-backupserver
            spec:
              serviceName: {{ $name }}-backupserver-svc
              replicas: 1
              selector:
                matchLabels:
                  app: {{ $name }}-backupserver
              template:
                metadata:
                  labels:
                    app: {{ $name }}-backupserver
                spec:
                  {{- if $spec.nodeSelector }}
                  nodeSelector:
                    {{- range $k, $v := $spec.nodeSelector }}
                    {{ $k }}: {{ $v | quote }}
                    {{- end }}
                  {{- end }}
                  containers:
                    - name: backupserver
                      image: {{ $spec.image | quote }}
                      imagePullPolicy: IfNotPresent
                      ports:
                        - containerPort: 8000
                          name: http
                      env:
                        - name: DISABLE_AUTHENTICATION
                          value: "true"
                      args:
                        - "/entrypoint.sh"
                        - "--path"
                        - "/data"
                        - "--no-auth"
                        {{- if $spec.config.options }}
                        {{- range $flag := splitList " " $spec.config.options }}
                        - {{ $flag | quote }}
                        {{- end }}
                        {{- end }}
                      volumeMounts:
                        - name: data
                          mountPath: /data
                      resources:
                        requests:
                          memory: {{ $spec.resources.requests.memory | quote }}
                          cpu: {{ $spec.resources.requests.cpu | quote }}
                        limits:
                          memory: {{ $spec.resources.limits.memory | quote }}
                          cpu: {{ $spec.resources.limits.cpu | quote }}
              volumeClaimTemplates:
                - metadata:
                    name: data
                  spec:
                    accessModes: ["ReadWriteOnce"]
                    {{- if $spec.persistence.storageClass }}
                    storageClassName: {{ $spec.persistence.storageClass | quote }}
                    {{- end }}
                    resources:
                      requests:
                        storage: {{ $spec.persistence.size | quote }}

            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: {{ $name }}-backupserver
              namespace: {{ $namespace | quote }}
              annotations:
                gotemplating.fn.crossplane.io/ready: "True"
                gotemplating.fn.crossplane.io/composition-resource-name: {{ $name }}-backupserver-svc
            spec:
              clusterIP: None
              selector:
                app: {{ $name }}-backupserver

            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: {{ $name }}-backupserver-public
              namespace: {{ $namespace | quote }}
              annotations:
                gotemplating.fn.crossplane.io/ready: "True"
                gotemplating.fn.crossplane.io/composition-resource-name: {{ $name }}-backupserver-public-svc
            spec:
              type: {{ $spec.service.type }}
              ports:
                - port: 8000
                  targetPort: 8000
                  name: http
              selector:
                app: {{ $name }}-backupserver

            {{- if $spec.ingress.enabled }}
            ---
            apiVersion: networking.k8s.io/v1
            kind: Ingress
            metadata:
              name: {{ $name }}-backupserver
              namespace: {{ $namespace | quote }}
              annotations:
                gotemplating.fn.crossplane.io/ready: "True"
                gotemplating.fn.crossplane.io/composition-resource-name: {{ $name }}-backupserver-ingress
                {{- if $spec.ingress.className }}
                kubernetes.io/ingress.class: {{ $spec.ingress.className | quote }}
                {{- end }}
                {{- range $k, $v := $spec.ingress.annotations }}
                {{ $k }}: {{ $v | quote }}
                {{- end }}
            spec:
              {{- if $spec.ingress.className }}
              ingressClassName: {{ $spec.ingress.className | quote }}
              {{- end }}
              {{- if $spec.ingress.tlsSecretName }}
              tls:
                - hosts:
                    - {{ $spec.ingress.host | quote }}
                  secretName: {{ $spec.ingress.tlsSecretName | quote }}
              {{- end }}
              rules:
                - {{- if $spec.ingress.host }}
                  host: {{ $spec.ingress.host | quote }}
                  {{- end }}
                  http:
                    paths:
                      - path: /
                        pathType: Prefix
                        backend:
                          service:
                            name: {{ $name }}-backupserver-public
                            port:
                              number: 8000
            {{- end }}

            ---

    - step: ui-for-rest-backend
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{- $spec := .observed.composite.resource.spec -}}
            {{- $name := .observed.composite.resource.metadata.name -}}
            {{- $namespace := .observed.composite.resource.metadata.namespace | default "default" -}}
            {{- if $spec.ui }}
            ---
            apiVersion: apps/v1
            kind: StatefulSet
            metadata:
              name: {{ $name }}-backupserver-ui
              namespace: {{ $namespace | quote }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{ $name }}-ui-sts
                gotemplating.fn.crossplane.io/ready: "True"
              labels:
                app: {{ $name }}-backupserver-ui
            spec:
              serviceName: {{ $name }}-backupserver-ui
              replicas: 1
              selector:
                matchLabels:
                  app: {{ $name }}-backupserver-ui
              template:
                metadata:
                  labels:
                    app: {{ $name }}-backupserver-ui
                spec:
                  containers:
                    - name: backrest-backupserver-ui
                      image: {{ $spec.ui.image | default "garethgeorge/backrest:latest" | quote }}
                      imagePullPolicy: {{ $spec.ui.imagePullPolicy | default "Always" | quote }}
                      ports:
                        - containerPort: 9898
                          name: http
                      resources:
                        requests:
                          memory: {{ $spec.ui.resources.requests.memory | default "64Mi" | quote }}
                          cpu: {{ $spec.ui.resources.requests.cpu | default "50m" | quote }}
                        limits:
                          memory: {{ $spec.ui.resources.limits.memory | default "128Mi" | quote }}
                          cpu: {{ $spec.ui.resources.limits.cpu | default "100m" | quote }}
                  restartPolicy: Always
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: {{ $name }}-backupserver-ui
              namespace: {{ $namespace | quote }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{ $name }}-ui-svc
                gotemplating.fn.crossplane.io/ready: "True"

              labels:
                app: {{ $name }}-backupserver-ui
            spec:
              type: ClusterIP
              ports:
                - port: 9898
                  targetPort: http
                  protocol: TCP
                  name: http
              selector:
                app: {{ $name }}-backupserver-ui
            {{- if $spec.ui.ingress }}
            ---
            apiVersion: networking.k8s.io/v1
            kind: Ingress
            metadata:
              name: {{ $name }}-backupserver-ui
              namespace: {{ $namespace | quote }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{ $name }}-ui-ingress
                gotemplating.fn.crossplane.io/ready: "True"
                {{- range $k, $v := $spec.ui.ingress.annotations }}
                {{ $k }}: {{ $v | quote }}
                {{- end }}
              labels:
                app: {{ $name }}-backupserver-ui
            spec:
              rules:
                - host: {{ $spec.ui.ingress.host | quote }}
                  http:
                    paths:
                      - path: /
                        pathType: Prefix
                        backend:
                          service:
                            name: {{ $name }}-backupserver-ui
                            port:
                              number: 9898
              {{- if $spec.ui.ingress.tls }}
              tls:
                - hosts:
                    - {{ $spec.ui.ingress.host | quote }}
                  {{- if $spec.ui.ingress.tls.secretName }}
                  secretName: {{ $spec.ui.ingress.tls.secretName | quote }}
                  {{- end }}
              {{- end }}
            {{- end }}
            {{- end }}

    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready 

    # - step: set-status-url
    #   functionRef:
    #     name: crossplane-contrib-function-go-templating
    #   input:
    #     apiVersion: gotemplating.fn.crossplane.io/v1beta1
    #     kind: GoTemplate
    #     source: Inline
    #     inline: 
    #       template: |
    #           {{- if .observed.composite.resource.spec.ingress }}
    #             {{- if .observed.resources }}
    #               {{- $key := printf "helmrelease-%s" .observed.composite.resource.metadata.name -}}
    #               {{- $hr := index .observed.resources $key | default nil -}}
    #               {{- if $hr }}
    #                 {{- $ready := ($hr | getResourceCondition "Ready").Status | default "False" -}}
    #                 {{- if eq $ready "True" }}
    #                   {{- $protocol := "http" -}}
    #                   {{- if and (.observed.composite.resource.spec.tls) (ne (len .observed.composite.resource.spec.tls) 0) -}}
    #                     {{- $protocol = "https" -}}
    #                   {{- end -}}
    #           ---
    #           apiVersion: apps.homystack.com/v1alpha1
    #           kind: VaultWarden
    #           status:
    #             url: {{ quote (printf "%s://%s" $protocol .observed.composite.resource.spec.ingress.host) }}
    #                 {{- end }}
    #               {{- end }}
    #             {{- end }}
    #           {{- end }}
